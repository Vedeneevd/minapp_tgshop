import os
import logging
from functools import wraps
from typing import Union, List, Any, Callable, Dict
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func
from models import Brand, Category, Product
from database import engine, AsyncSessionLocal
from sqlalchemy.orm import joinedload

router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMINS = [6326719341, 790410251, 6388614116, 8188457128]  # –í–∞—à Telegram ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
PAGINATION_BRANDS_PER_PAGE = 10
PAGINATION_CATEGORIES_PER_PAGE = 8
PAGINATION_PRODUCTS_PER_PAGE = 20


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddStates(StatesGroup):
    brand_name = State()
    category_brand = State()
    category_name = State()
    product_brand = State()
    product_category = State()
    product_name = State()
    product_price = State()
    product_photo = State()
    product_description = State()


class EditStates(StatesGroup):
    brand_name = State()
    category_name = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    category_id = State()
    product_id = State()
    field = State()
    new_value = State()


class DeleteStates(StatesGroup):
    brand_name = State()
    category_name = State()
    product_name = State()
    confirm_delete = State()
    select_brand_for_category = State()
    search_product = State()  # –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(user_id: int) -> bool:
    return user_id in ADMINS


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        update = None
        for arg in args:
            if isinstance(arg, (Message, CallbackQuery)):
                update = arg
                break

        if not update:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç update")
            return

        if not await is_admin(update.from_user.id):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {update.from_user.id}")
            if isinstance(update, CallbackQuery):
                await update.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            else:
                await update.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return

        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)
            if isinstance(update, CallbackQuery):
                await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            else:
                await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    return wrapper


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_brands(session: AsyncSession):
    result = await session.execute(select(Brand).order_by(Brand.name))
    return result.scalars().all()


async def get_categories_with_brands(session: AsyncSession):
    result = await session.execute(
        select(Category, Brand)
        .join(Brand, Category.brand_id == Brand.id)
        .order_by(Brand.name, Category.name)
    )
    return result.all()


async def get_products_with_details(session: AsyncSession):
    try:
        result = await session.execute(
            select(Product)
            .join(Category, Product.category_id == Category.id)
            .join(Brand, Category.brand_id == Brand.id)
            .order_by(Brand.name, Category.name, Product.name)
            .options(
                joinedload(Product.category).joinedload(Category.brand)
            )
        )
        return result.unique().scalars().all()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_products_with_details: {e}")
        raise


async def get_categories_by_brand(session: AsyncSession, brand_id: int):
    result = await session.execute(
        select(Category)
        .where(Category.brand_id == brand_id)
    )
    return result.scalars().all()


async def get_products(session: AsyncSession):
    result = await session.execute(select(Product))
    return result.scalars().all()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def send_paginated_message(
        callback: CallbackQuery,
        items: List[Any],
        title: str,
        item_format: Callable[[Any, int], str],
        items_per_page: int = 5,
        current_page: int = 0,
        back_callback: str = "admin_back",
        menu_callback: str = None,
        action_callback: str = None,
        parse_mode: str = "HTML"
):
    total_items = len(items)
    if total_items == 0:
        await callback.message.answer(f"{title}\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", parse_mode=parse_mode)
        return

    total_pages = (total_items + items_per_page - 1) // items_per_page
    start_idx = current_page * items_per_page
    end_idx = min(start_idx + items_per_page, total_items)

    message_text = f"{title}\n\n"
    for i, item in enumerate(items[start_idx:end_idx], start_idx + 1):
        message_text += f"{item_format(item, i)}\n"

    message_text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"

    builder = InlineKeyboardBuilder()

    if current_page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{current_page - 1}")
    if current_page < total_pages - 1:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{current_page + 1}")

    if action_callback:
        for i, item in enumerate(items[start_idx:end_idx], start_idx):
            item_id = item[0].id if isinstance(item, tuple) else item.id
            builder.button(
                text=f"–í—ã–±—Ä–∞—Ç—å {i + 1}",
                callback_data=f"{action_callback}:{item_id}"
            )
        builder.adjust(2, repeat=True)

    if menu_callback:
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data=menu_callback)
    else:
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)

    builder.adjust(2)

    try:
        await callback.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode=parse_mode
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer(
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode=parse_mode
        )


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
async def admin_panel(update: Union[Message, CallbackQuery]):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="products_menu"),
        InlineKeyboardButton(text="üè∑Ô∏è –ë—Ä–µ–Ω–¥—ã", callback_data="brands_menu"),
        InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")
    )
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product_start"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥", callback_data="add_brand_start"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category_start")
    )

    if isinstance(update, CallbackQuery):
        await update.message.edit_text(
            "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=builder.as_markup()
        )
    else:
        await update.answer(
            "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=builder.as_markup()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
@admin_required
async def admin_command(message: Message):
    await admin_panel(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "admin_back")
@admin_required
async def back_to_admin(callback: CallbackQuery):
    try:
        await admin_panel(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞–∑–∞–¥: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await callback.answer()


# ========================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–†–ï–ù–î–ê–ú–ò
# ========================

@router.callback_query(F.data == "brands_menu")
@admin_required
async def brands_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤", callback_data="view_brands"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_brand_select")
    )
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_brand_start"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_brand_select")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))

    try:
        await callback.message.edit_text(
            "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞–º–∏:</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ brands_menu: {e}")
        await callback.message.answer(
            "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞–º–∏:</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "view_brands")
@admin_required
async def view_brands(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        async with AsyncSessionLocal() as session:
            brands = await get_brands(session)

            def format_brand(brand: Brand, idx: int) -> str:
                return f"{idx}. {brand.name} (ID: {brand.id})"

            await send_paginated_message(
                callback=callback,
                items=brands,
                title="üè∑Ô∏è <b>–°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤:</b>",
                item_format=format_brand,
                items_per_page=PAGINATION_BRANDS_PER_PAGE,
                menu_callback="brands_menu",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤")
    finally:
        await callback.answer()


@router.callback_query(F.data == "add_brand_start")
@admin_required
async def add_brand_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞"""
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞:")
    await state.set_state(AddStates.brand_name)
    await callback.answer()


@router.message(AddStates.brand_name)
@admin_required
async def add_brand_finish(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞"""
    brand_name = message.text.strip()
    if not brand_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    try:
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±—Ä–µ–Ω–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            existing_brand = await session.execute(
                select(Brand).where(func.lower(Brand.name) == func.lower(brand_name)
                                    ))
            if existing_brand.scalar_one_or_none():
                await message.answer(f"‚ùå –ë—Ä–µ–Ω–¥ '{brand_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                await state.clear()
                return await admin_panel(message)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥
            new_brand = Brand(name=brand_name)
            session.add(new_brand)
            await session.commit()

            await message.answer(f"‚úÖ –ë—Ä–µ–Ω–¥ <b>{brand_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞")
    finally:
        await state.clear()
        await admin_panel(message)


@router.callback_query(F.data == "edit_brand_select")
@admin_required
async def edit_brand_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(EditStates.brand_name)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.answer()


@router.message(EditStates.brand_name)
@admin_required
async def find_brand_to_edit(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    search_text = message.text.strip().lower()
    if not search_text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return

    try:
        async with AsyncSessionLocal() as session:
            # –ò—â–µ–º –±—Ä–µ–Ω–¥ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
            stmt = select(Brand).where(func.lower(Brand.name) == search_text)
            result = await session.execute(stmt)
            brand = result.scalar_one_or_none()

            if not brand:
                await message.answer(f"‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±—Ä–µ–Ω–¥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await state.update_data(brand_id=brand.id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
                    callback_data=f"edit_brand_name:{brand.id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="brands_menu"
                )
            )

            await message.answer(
                f"üè∑ <b>–ù–∞–π–¥–µ–Ω –±—Ä–µ–Ω–¥:</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {brand.name}\n"
                f"ID: {brand.id}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—Ä–µ–Ω–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—Ä–µ–Ω–¥–∞")
        await state.clear()


@router.callback_query(F.data.startswith("edit_brand_name:"))
@admin_required
async def start_edit_brand_name(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞"""
    try:
        brand_id = int(callback.data.split(":")[1])
        await state.update_data(brand_id=brand_id)
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        await state.set_state(EditStates.new_value)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
    finally:
        await callback.answer()


@router.message(EditStates.new_value)
@admin_required
async def save_edited_brand_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞"""
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    try:
        data = await state.get_data()
        brand_id = data.get('brand_id')

        async with AsyncSessionLocal() as session:
            brand = await session.get(Brand, brand_id)
            if not brand:
                await message.answer("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –±—Ä–µ–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            existing_brand = await session.execute(
                select(Brand).where(
                    and_(
                        func.lower(Brand.name) == func.lower(new_name),
                        Brand.id != brand_id
                    )
                )
            )
            if existing_brand.scalar_one_or_none():
                await message.answer(f"‚ùå –ë—Ä–µ–Ω–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return

            old_name = brand.name
            brand.name = new_name
            await session.commit()

            await message.answer(
                f"‚úÖ –ë—Ä–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {old_name}\n"
                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_name}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    finally:
        await state.clear()
        await admin_panel(message)


@router.callback_query(F.data == "delete_brand_select")
@admin_required
async def delete_brand_select(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞"""
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteStates.brand_name)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.answer()


@router.message(DeleteStates.brand_name)
@admin_required
async def find_brand_to_delete(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    search_text = message.text.strip().lower()
    if not search_text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return

    try:
        async with AsyncSessionLocal() as session:
            # –ò—â–µ–º –±—Ä–µ–Ω–¥ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
            stmt = select(Brand).where(func.lower(Brand.name) == search_text)
            result = await session.execute(stmt)
            brand = result.scalar_one_or_none()

            if not brand:
                await message.answer(f"‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
            categories_count = await session.execute(
                select(func.count(Category.id))
                .where(Category.brand_id == brand.id)
            )
            categories_count = categories_count.scalar()

            warning = ""
            if categories_count > 0:
                warning = f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ {categories_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"

            await state.update_data(brand_id=brand.id)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data="confirm_brand_delete"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                    callback_data="cancel_brand_delete"
                )
            )

            await message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—Ä–µ–Ω–¥?\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {brand.name}\n"
                f"ID: {brand.id}{warning}",
                reply_markup=builder.as_markup()
            )
            await state.set_state(DeleteStates.confirm_delete)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—Ä–µ–Ω–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±—Ä–µ–Ω–¥–∞")
        await state.clear()


@router.callback_query(DeleteStates.confirm_delete, F.data == "confirm_brand_delete")
@admin_required
async def execute_brand_delete(callback: CallbackQuery, state: FSMContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞"""
    try:
        data = await state.get_data()
        brand_id = data.get('brand_id')

        if not brand_id:
            await callback.message.answer("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            await state.clear()
            return

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            brand = await session.get(Brand, brand_id, options=[joinedload(Brand.categories)])
            if not brand:
                await callback.message.answer("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏ –∏—Ö —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
            for category in brand.categories:
                await session.delete(category)

            brand_name = brand.name
            await session.delete(brand)
            await session.commit()

            await callback.message.answer(
                f"‚úÖ –ë—Ä–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {brand_name}\n"
                f"ID: {brand_id}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞")
    finally:
        await state.clear()
        await admin_panel(callback.message)


@router.callback_query(DeleteStates.confirm_delete, F.data == "cancel_brand_delete")
@admin_required
async def cancel_brand_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞"""
    await state.clear()
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await admin_panel(callback.message)


class EditStates(StatesGroup):
    brand_name = State()
    category_name = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    category_id = State()
    product_id = State()
    field = State()
    new_value = State()


# ========================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò
# ========================

@router.callback_query(F.data == "products_menu")
@admin_required
async def products_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="view_products"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_product_select")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_product_select"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    await callback.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "view_products")
@admin_required
async def view_products(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_page = data.get('products_page', 0)

        async with AsyncSessionLocal() as session:
            products = await get_products_with_details(session)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} –∑–∞–ø–∏—Å–µ–π")
            if products:
                logger.info(f"–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {products[0].name}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            grouped_data = {}
            for product in products:
                category = product.category
                brand = category.brand
                key = f"{brand.name} / {category.name}"
                if key not in grouped_data:
                    grouped_data[key] = []
                grouped_data[key].append(product)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            flat_list = []
            for category_path, products in grouped_data.items():
                flat_list.append(("header", category_path))
                for product in products:
                    flat_list.append(("product", product))

            def format_item(item, idx):
                if item[0] == "header":
                    return f"\n<b>{item[1]}</b>"
                else:
                    product = item[1]
                    return (
                        f"‚îú {product.name}\n"
                        f"‚îú‚îÄ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                        f"‚îú‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                        f"‚îî‚îÄ ID: {product.id}"
                    )

            await send_paginated_message(
                callback=callback,
                items=flat_list,
                title="üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>",
                item_format=format_item,
                items_per_page=PAGINATION_PRODUCTS_PER_PAGE,
                current_page=current_page,
                menu_callback="products_menu"
            )

    except Exception as e:
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ view_products: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await callback.answer()


@router.callback_query(F.data == "add_product_start")
@admin_required
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    async with AsyncSession(engine) as session:
        brands = await get_brands(session)

        if not brands:
            await callback.message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥—ã")
            return await callback.answer()

        builder = InlineKeyboardBuilder()
        for brand in brands:
            builder.button(text=brand.name, callback_data=f"add_prod_brand_{brand.id}")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddStates.product_brand)
        await callback.answer()


@router.callback_query(AddStates.product_brand, F.data.startswith("add_prod_brand_"))
@admin_required
async def select_product_category(callback: CallbackQuery, state: FSMContext):
    brand_id = int(callback.data.split("_")[3])
    await state.update_data(brand_id=brand_id)

    async with AsyncSession(engine) as session:
        brand = await session.get(Brand, brand_id)
        result = await session.execute(select(Category).where(Category.brand_id == brand.id))
        categories = result.scalars().all()

        if not categories:
            await callback.message.answer("‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return await state.clear()

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"add_prod_cat_{category.id}")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddStates.product_category)
        await callback.answer()


@router.callback_query(AddStates.product_category, F.data.startswith("add_prod_cat_"))
@admin_required
async def set_product_name(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddStates.product_name)
    await callback.answer()


@router.message(AddStates.product_name)
@admin_required
async def set_product_price(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddStates.product_price)


@router.message(AddStates.product_price)
@admin_required
async def set_product_photo(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddStates.product_photo)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")


@router.message(AddStates.product_photo, F.photo)
@admin_required
async def set_product_description(message: Message, state: FSMContext):
    os.makedirs("/var/www/rshop/static/products", exist_ok=True)
    photo = message.photo[-1]
    photo_filename = f"{photo.file_id}.jpg"
    photo_url = f"products/{photo_filename}"
    full_path = f"/var/www/rshop/static/{photo_url}"

    try:
        file = await message.bot.get_file(photo.file_id)
        await message.bot.download_file(file.file_path, full_path)
        await state.update_data(photo_url=photo_url)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(AddStates.product_description)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}")


@router.message(AddStates.product_description)
@admin_required
async def add_product_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    description = message.text if message.text != "-" else None

    async with AsyncSession(engine) as session:
        product = Product(
            name=data['name'],
            price=data['price'],
            photo_url=data['photo_url'],
            description=description,
            category_id=data['category_id']
        )
        session.add(product)
        await session.commit()
        await session.refresh(product)

        caption = (
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω (ID: {product.id})\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
            f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )

        try:
            photo = FSInputFile(f"/var/www/rshop/static/{product.photo_url}")
            await message.answer_photo(photo, caption=caption)
        except:
            await message.answer(caption + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    await state.clear()
    await admin_panel(message)


@router.callback_query(F.data == "edit_product_select")
@admin_required
async def start_product_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(DeleteStates.search_product)
    await callback.answer()


@router.message(DeleteStates.search_product)
@admin_required
async def find_and_edit_product(message: Message, state: FSMContext):
    search_text = message.text.strip().lower()

    async with AsyncSessionLocal() as session:
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        stmt = (
            select(Product)
            .join(Category).join(Brand)
            .where(func.lower(Product.name) == search_text)
            .options(joinedload(Product.category).joinedload(Category.brand))
        )
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(product_id=product.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        info_text = (
            f"üè∑ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"üè≠ –ë—Ä–µ–Ω–¥: {product.category.brand.name}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}\n"
            f"üíµ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–Ω–µ—Ç'}\n"
            f"üÜî ID: {product.id}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
            InlineKeyboardButton(text="üíµ –¶–µ–Ω–∞", callback_data="edit_field_price")
        )
        builder.row(
            InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_desc"),
            InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="edit_field_photo")
        )
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="products_menu"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if product.photo_url:
            try:
                photo = FSInputFile(f"/var/www/rshop/static/{product.photo_url}")
                await message.answer_photo(photo, caption=info_text, reply_markup=builder.as_markup())
            except:
                await message.answer(info_text, reply_markup=builder.as_markup())
        else:
            await message.answer(info_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("select_product_"))
@admin_required
async def handle_product_selection(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])

        async with AsyncSessionLocal() as session:
            product = await session.get(
                Product,
                product_id,
                options=[joinedload(Product.category).joinedload(Category.brand)]
            )

            if product:
                await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
                await show_product_edit_options(callback.message, product)
            else:
                await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞", show_alert=True)


@router.callback_query(F.data == "edit_field_name")
@admin_required
async def edit_product_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditStates.field)
    await state.update_data(field="name")
    await callback.answer()


@router.callback_query(F.data == "edit_field_price")
@admin_required
async def edit_product_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await state.set_state(EditStates.field)
    await state.update_data(field="price")
    await callback.answer()


@router.callback_query(F.data == "edit_field_desc")
@admin_required
async def edit_product_desc(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):")
    await state.set_state(EditStates.field)
    await state.update_data(field="description")
    await callback.answer()


@router.callback_query(F.data == "edit_field_photo")
@admin_required
async def edit_product_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    await state.set_state(EditStates.field)
    await state.update_data(field="photo_url")
    await callback.answer()


@router.message(EditStates.field)
@admin_required
async def save_product_changes(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['field']
    value = message.text if field != "photo_url" else None

    if field == "photo_url" and message.photo:
        photo = message.photo[-1]
        photo_filename = f"{photo.file_id}.jpg"
        photo_url = f"products/{photo_filename}"
        full_path = f"/var/www/rshop/static/{photo_url}"

        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ
            async with AsyncSession(engine) as session:
                product = await session.get(Product, data['product_id'])
                old_photo = f"/var/www/rshop/static/{product.photo_url}"
                if os.path.exists(old_photo):
                    os.remove(old_photo)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            file = await message.bot.get_file(photo.file_id)
            await message.bot.download_file(file.file_path, full_path)
            value = photo_url
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}")
            return

    if field == "description" and value == "-":
        value = None

    if field == "price":
        try:
            value = float(value)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
            return

    async with AsyncSession(engine) as session:
        product = await session.get(Product, data['product_id'])
        setattr(product, field, value)
        await session.commit()
        await message.answer(f"‚úÖ {field.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    await state.clear()
    await admin_panel(message)


@router.callback_query(F.data == "delete_product_select")
@admin_required
async def delete_product_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteStates.product_name)
    await callback.answer()


@router.message(DeleteStates.product_name)
@admin_required
async def delete_product_confirm(message: Message, state: FSMContext):
    product_name = message.text.strip()

    async with AsyncSession(engine) as session:
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –∏–º–µ–Ω–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        stmt = select(Product).where(func.lower(Product.name) == func.lower(product_name))
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()

        if not product:
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –±—Ä–µ–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        category = await session.get(Category, product.category_id)
        brand = await session.get(Brand, category.brand_id)

        await state.update_data(product_id=product.id)

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_product_delete"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back")
        )

        await message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?\n"
            f"–ë—Ä–µ–Ω–¥: {brand.name}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
            f"–¢–æ–≤–∞—Ä: {product.name}\n"
            f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"ID: {product.id}",
            reply_markup=builder.as_markup()
        )
        await state.set_state(DeleteStates.confirm_delete)


@router.callback_query(DeleteStates.confirm_delete, F.data == "confirm_product_delete")
@admin_required
async def delete_product_execute(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')

    if not product_id:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return

    async with AsyncSession(engine) as session:
        product = await session.get(Product, product_id)
        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
        if product.photo_url:
            photo_path = f"/var/www/rshop/static/{product.photo_url}"
            if os.path.exists(photo_path):
                try:
                    os.remove(photo_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")

        product_name = product.name
        await session.delete(product)
        await session.commit()

        await callback.message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
            f"ID: {product_id}"
        )

    await state.clear()
    await admin_panel(callback.message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("page_"))
@admin_required
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[1])
        await state.update_data(products_page=page)  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = callback.message.text or ""

        if "—Ç–æ–≤–∞—Ä" in message_text.lower():
            await view_products(callback, state)
        elif "–±—Ä–µ–Ω–¥" in message_text.lower():
            await view_brands(callback, state)
        elif "–∫–∞—Ç–µ–≥–æ—Ä–∏" in message_text.lower():
            await view_categories(callback, state)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


# ========================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# ========================

class CategoryStates(StatesGroup):
    select_brand = State()
    enter_name = State()
    edit_select = State()
    edit_enter_name = State()
    delete_select = State()
    delete_confirm = State()


@router.callback_query(F.data == "categories_menu")
@admin_required
async def categories_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="view_categories"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category_start")
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_category_start"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_category_start")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))

    try:
        await callback.message.edit_text(
            "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é")


@router.callback_query(F.data == "view_categories")
@admin_required
async def view_categories(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            categories = await session.execute(
                select(Category)
                .options(joinedload(Category.brand))
                .order_by(Category.name)
            )
            categories = categories.unique().scalars().all()

            if not categories:
                await callback.message.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç")
                return

            def format_category(category: Category, idx: int) -> str:
                return f"{idx}. {category.brand.name} / {category.name} (ID: {category.id})"

            await send_paginated_message(
                callback=callback,
                items=categories,
                title="üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
                item_format=format_category,
                items_per_page=PAGINATION_CATEGORIES_PER_PAGE,
                menu_callback="categories_menu"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")


@router.callback_query(F.data == "add_category_start")
@admin_required
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    try:
        async with AsyncSessionLocal() as session:
            brands = await session.execute(select(Brand).order_by(Brand.name))
            brands = brands.scalars().all()

            if not brands:
                await callback.message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥—ã")
                return

            builder = InlineKeyboardBuilder()
            for brand in brands:
                builder.button(text=brand.name, callback_data=f"add_cat_brand_{brand.id}")

            builder.adjust(2)
            builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="categories_menu"))

            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=builder.as_markup()
            )
            await state.set_state(CategoryStates.select_brand)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")


@router.callback_query(CategoryStates.select_brand, F.data.startswith("add_cat_brand_"))
@admin_required
async def select_brand_for_category(callback: CallbackQuery, state: FSMContext):
    try:
        brand_id = int(callback.data.split("_")[3])
        await state.update_data(brand_id=brand_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(CategoryStates.enter_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")


@router.message(CategoryStates.enter_name)
@admin_required
async def save_new_category(message: Message, state: FSMContext):
    try:
        category_name = message.text.strip()
        if not category_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        data = await state.get_data()
        brand_id = data.get('brand_id')

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            existing = await session.scalar(
                select(Category).where(
                    and_(
                        Category.brand_id == brand_id,
                        func.lower(Category.name) == func.lower(category_name)
                    )
                )
            )

            if existing:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            new_category = Category(name=category_name, brand_id=brand_id)
            session.add(new_category)
            await session.commit()

            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            await admin_panel(message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await state.clear()


@router.callback_query(F.data == "edit_category_start")
@admin_required
async def edit_category_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(CategoryStates.edit_select)
    await callback.answer()


@router.message(CategoryStates.edit_select)
@admin_required
async def find_category_to_edit(message: Message, state: FSMContext):
    try:
        search_text = message.text.strip().lower()
        if not search_text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            return

        async with AsyncSessionLocal() as session:
            categories = await session.execute(
                select(Category)
                .join(Brand)
                .where(func.lower(Category.name) == search_text)
                .options(joinedload(Category.brand))
            )
            categories = categories.unique().scalars().all()

            if not categories:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if len(categories) == 1:
                category = categories[0]
                await state.update_data(category_id=category.id)
                await message.answer(
                    f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.brand.name} / {category.name}\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                )
                await state.set_state(CategoryStates.edit_enter_name)
            else:
                builder = InlineKeyboardBuilder()
                for category in categories:
                    builder.button(
                        text=f"{category.brand.name} - {category.name}",
                        callback_data=f"edit_cat_{category.id}"
                    )
                builder.adjust(1)
                await message.answer(
                    "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
                    reply_markup=builder.as_markup()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


@router.callback_query(F.data.startswith("edit_cat_"))
@admin_required
async def select_category_to_edit(callback: CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[1])
        await state.update_data(category_id=category_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(CategoryStates.edit_enter_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


@router.message(CategoryStates.edit_enter_name)
@admin_required
async def save_edited_category(message: Message, state: FSMContext):
    try:
        new_name = message.text.strip()
        if not new_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        data = await state.get_data()
        category_id = data.get('category_id')

        async with AsyncSessionLocal() as session:
            category = await session.get(Category, category_id, options=[joinedload(Category.brand)])
            if not category:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            existing = await session.scalar(
                select(Category).where(
                    and_(
                        Category.brand_id == category.brand_id,
                        func.lower(Category.name) == func.lower(new_name),
                        Category.id != category_id
                    )
                )
            )
            if existing:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            old_name = category.name
            category.name = new_name
            await session.commit()

            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
                f"–ë—ã–ª–æ: {old_name}\n"
                f"–°—Ç–∞–ª–æ: {new_name}"
            )
            await admin_panel(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    finally:
        await state.clear()


@router.callback_query(F.data == "delete_category_start")
@admin_required
async def delete_category_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(CategoryStates.delete_select)
    await callback.answer()


@router.message(CategoryStates.delete_select)
@admin_required
async def find_category_to_delete(message: Message, state: FSMContext):
    try:
        search_text = message.text.strip().lower()
        if not search_text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            return

        async with AsyncSessionLocal() as session:
            categories = await session.execute(
                select(Category)
                .join(Brand)
                .where(func.lower(Category.name) == search_text)
                .options(joinedload(Category.brand))
            )
            categories = categories.unique().scalars().all()

            if not categories:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            if len(categories) == 1:
                category = categories[0]
                await show_delete_confirmation(message, state, category)
            else:
                builder = InlineKeyboardBuilder()
                for category in categories:
                    builder.button(
                        text=f"{category.brand.name}",
                        callback_data=f"del_cat_{category.id}"
                    )
                builder.adjust(2)
                await message.answer(
                    "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
                    reply_markup=builder.as_markup()
                )
                await state.update_data(categories={c.id: c for c in categories})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


async def show_delete_confirmation(message: Message, state: FSMContext, category: Category):
    try:
        async with AsyncSessionLocal() as session:
            products_count = await session.scalar(
                select(func.count(Product.id)).where(Product.category_id == category.id)
            )

            warning = ""
            if products_count > 0:
                warning = f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {products_count} —Ç–æ–≤–∞—Ä–æ–≤, –æ–Ω–∏ —Ç–æ–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"

            await state.update_data(category_id=category.id)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_category_delete"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_category_delete")
            )

            await message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n"
                f"–ë—Ä–µ–Ω–¥: {category.brand.name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}\n"
                f"ID: {category.id}{warning}",
                reply_markup=builder.as_markup()
            )
            await state.set_state(CategoryStates.delete_confirm)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")


@router.callback_query(F.data.startswith("del_cat_"))
@admin_required
async def select_category_to_delete(callback: CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        categories = data.get('categories', {})
        category = categories.get(category_id)

        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await callback.message.delete()
        await show_delete_confirmation(callback.message, state, category)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


@router.callback_query(CategoryStates.delete_confirm, F.data == "confirm_category_delete")
@admin_required
async def execute_category_delete(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        category_id = data.get('category_id')

        if not category_id:
            await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            await state.clear()
            return

        async with AsyncSessionLocal() as session:
            category = await session.get(Category, category_id, options=[joinedload(Category.brand)])
            if not category:
                await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            category_name = category.name
            brand_name = category.brand.name

            await session.delete(category)
            await session.commit()

            await callback.message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
                f"–ë—Ä–µ–Ω–¥: {brand_name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                f"ID: {category_id}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await state.clear()
        await admin_panel(callback.message)


@router.callback_query(CategoryStates.delete_confirm, F.data == "cancel_category_delete")
@admin_required
async def cancel_category_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await admin_panel(callback.message)