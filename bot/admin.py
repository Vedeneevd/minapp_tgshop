import os
import logging
from functools import wraps
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from models import Brand, Category, Product
from database import engine, AsyncSessionLocal

router = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMINS = [6326719341]  # –í–∞—à Telegram ID


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddStates(StatesGroup):
    brand_name = State()
    category_brand = State()
    category_name = State()
    product_brand = State()
    product_category = State()
    product_name = State()
    product_price = State()
    product_photo = State()
    product_description = State()


class EditStates(StatesGroup):
    category_id = State()
    product_id = State()
    field = State()
    new_value = State()


class DeleteStates(StatesGroup):
    category_id = State()
    product_id = State()
    brand_id = State()


# –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        update = None
        for arg in args:
            if isinstance(arg, (Message, CallbackQuery)):
                update = arg
                break

        if not update:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç update")
            return

        user_id = update.from_user.id
        if user_id not in ADMINS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {user_id}")
            if isinstance(update, CallbackQuery):
                await update.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            else:
                await update.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return

        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)
            if isinstance(update, CallbackQuery):
                await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            else:
                await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    return wrapper


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_brands(session: AsyncSession):
    result = await session.execute(select(Brand).order_by(Brand.name))
    return result.scalars().all()


async def get_categories_with_brands(session: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–º–µ–Ω–∞–º–∏ –±—Ä–µ–Ω–¥–æ–≤"""
    result = await session.execute(
        select(Category, Brand)
        .join(Brand, Category.brand_id == Brand.id)
        .order_by(Brand.name, Category.name)
    )
    return result.all()


async def get_products_with_details(session: AsyncSession):
    result = await session.execute(
        select(Product, Category, Brand)
        .select_from(Product)
        .join(Category, Product.category_id == Category.id)
        .join(Brand, Category.brand_id == Brand.id)
        .order_by(Brand.name, Category.name, Product.name)
    )
    return result.all()


async def get_categories_by_brand(session: AsyncSession, brand_id: int):
    result = await session.execute(
        select(Category)
        .where(Category.brand_id == brand_id)
    )
    return result.scalars().all()


# ========================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ========================

@router.message(Command("admin"))
@admin_required
async def admin_panel(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="products_menu"),
        InlineKeyboardButton(text="üè∑Ô∏è –ë—Ä–µ–Ω–¥—ã", callback_data="brands_menu"),
        InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")
    )
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product_start"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–µ–Ω–¥", callback_data="add_brand_start"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category_start")
    )

    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "admin_back")
@admin_required
async def back_to_admin(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await admin_panel(callback.message)
    await callback.answer()


# ========================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–†–ï–ù–î–ê–ú–ò
# ========================

@router.callback_query(F.data == "brands_menu")
@admin_required
async def brands_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤", callback_data="view_brands"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_brand_select")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_brand_select"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    await callback.message.edit_text("üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞–º–∏:", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "view_brands")
@admin_required
async def view_brands(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            brands = await get_brands(session)

            if not brands:
                await callback.message.answer("‚ÑπÔ∏è –ë—Ä–µ–Ω–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                return await callback.answer()

            text = "üè∑Ô∏è <b>–°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤:</b>\n\n" + "\n".join(
                f"{i + 1}. {brand.name} (ID: {brand.id})"
                for i, brand in enumerate(brands)
            )
            await callback.message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤")
    finally:
        await callback.answer()


@router.callback_query(F.data == "add_brand_start")
@admin_required
async def add_brand_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞:")
    await state.set_state(AddStates.brand_name)
    await callback.answer()


@router.message(AddStates.brand_name)
@admin_required
async def add_brand_finish(message: Message, state: FSMContext):
    async with AsyncSession(engine) as session:
        session.add(Brand(name=message.text))
        await session.commit()

    await message.answer(f"‚úÖ –ë—Ä–µ–Ω–¥ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    await admin_panel(message)


@router.callback_query(F.data == "edit_brand_select")
@admin_required
async def select_brand_to_edit(callback: CallbackQuery):
    async with AsyncSession(engine) as session:
        brands = await get_brands(session)

        if not brands:
            await callback.message.answer("‚ÑπÔ∏è –ë—Ä–µ–Ω–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return await callback.answer()

        builder = InlineKeyboardBuilder()
        for brand in brands:
            builder.button(
                text=f"{brand.name} (ID: {brand.id})",
                callback_data=f"edit_brand_{brand.id}"
            )
        builder.adjust(1)
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="brands_menu"))

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()


@router.callback_query(F.data.startswith("edit_brand_"))
@admin_required
async def edit_brand_name(callback: CallbackQuery, state: FSMContext):
    try:
        brand_id = int(callback.data.split("_")[2])
        await state.update_data(brand_id=brand_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        await state.set_state(EditStates.new_value)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")


@router.message(EditStates.new_value)
@admin_required
async def save_brand_name(message: Message, state: FSMContext):
    data = await state.get_data()

    async with AsyncSession(engine) as session:
        brand = await session.get(Brand, data.get('brand_id'))
        if not brand:
            await message.answer("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        old_name = brand.name
        brand.name = message.text
        await session.commit()
        await message.answer(f"‚úÖ –ë—Ä–µ–Ω–¥ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{message.text}'")

    await state.clear()
    await admin_panel(message)


# ========================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# ========================

class CategoryStates(StatesGroup):
    select_brand = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    enter_name = State()  # –î–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    select_for_edit = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_name = State()  # –î–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    select_for_delete = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    confirm_delete = State()  # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è


@router.callback_query(F.data == "categories_menu")
@admin_required
async def categories_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="view_categories"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category_start")
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="start_edit_category"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="start_delete_category")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))

    await callback.message.edit_text(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "view_categories")
@admin_required
async def view_categories(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –±—Ä–µ–Ω–¥–∞–º–∏"""
    try:
        async with AsyncSessionLocal() as session:
            categories_with_brands = await get_categories_with_brands(session)

            if not categories_with_brands:
                await callback.message.answer("‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return await callback.answer()

            text = "üìÇ <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>\n\n" + "\n".join(
                f"{i + 1}. {brand.name} / {category.name} (ID: {category.id})"
                for i, (category, brand) in enumerate(categories_with_brands)
            )
            await callback.message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        await callback.answer()
    # ========================


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
# ========================

@router.callback_query(F.data == "add_category_start")
@admin_required
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞"""
    try:
        async with AsyncSessionLocal() as session:
            brands = await get_brands(session)

            if not brands:
                await callback.message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥—ã")
                await state.clear()
                return await callback.answer()

            builder = InlineKeyboardBuilder()
            for brand in brands:
                builder.button(
                    text=brand.name,
                    callback_data=f"select_brand_{brand.id}"
                )
            builder.adjust(2)
            builder.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="categories_menu"))

            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=builder.as_markup()
            )
            await state.set_state(CategoryStates.select_brand)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await state.clear()
    finally:
        await callback.answer()


@router.callback_query(CategoryStates.select_brand, F.data.startswith("select_brand_"))
@admin_required
async def select_brand_for_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        brand_id = int(callback.data.split("_")[2])
        await state.update_data(brand_id=brand_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(CategoryStates.enter_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞")
        await state.clear()
    finally:
        await callback.answer()


@router.message(CategoryStates.enter_name)
@admin_required
async def save_new_category(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = await state.get_data()
        brand_id = data.get('brand_id')
        category_name = message.text.strip()

        if not brand_id:
            await message.answer("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            await state.clear()
            return

        if not category_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
            brand = await session.get(Brand, brand_id)
            if not brand:
                await message.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
            existing = await session.execute(
                select(Category)
                .where(and_(
                    Category.brand_id == brand_id,
                    func.lower(Category.name) == func.lower(category_name)
                ))
            )
            if existing.scalars().first():
                await message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = Category(
                name=category_name,
                brand_id=brand_id
            )
            session.add(new_category)
            await session.commit()

            await message.answer(
                f"‚úÖ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"–ë—Ä–µ–Ω–¥: {brand.name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await state.clear()
        await admin_panel(message)


# ========================
# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
# ========================

@router.callback_query(F.data == "start_edit_category")
@admin_required
async def start_edit_category(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        async with AsyncSessionLocal() as session:
            categories_with_brands = await get_categories_with_brands(session)

            if not categories_with_brands:
                await callback.answer("‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            builder = InlineKeyboardBuilder()
            for category, brand in categories_with_brands:
                builder.button(
                    text=f"{brand.name} / {category.name} (ID: {category.id})",
                    callback_data=f"select_edit_{category.id}"
                )
            builder.adjust(1)
            builder.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="categories_menu"))

            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )
            await state.set_state(CategoryStates.select_for_edit)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    finally:
        await callback.answer()


@router.callback_query(CategoryStates.select_for_edit, F.data.startswith("select_edit_"))
@admin_required
async def select_category_for_edit(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        category_id = int(callback.data.split("_")[2])
        await state.update_data(category_id=category_id)
        await state.set_state(CategoryStates.edit_name)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await callback.answer()


@router.message(CategoryStates.edit_name)
@admin_required
async def save_edited_category(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = await state.get_data()
        category_id = data.get('category_id')
        new_name = message.text.strip()

        if not category_id:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            await state.clear()
            return

        if not new_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        async with AsyncSessionLocal() as session:
            category = await session.get(Category, category_id)
            if not category:
                await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            old_name = category.name
            category.name = new_name
            await session.commit()

            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n"
                f"–ë—ã–ª–æ: {old_name}\n"
                f"–°—Ç–∞–ª–æ: {new_name}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    finally:
        await state.clear()
        await admin_panel(message)


# ========================
# –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
# ========================

@router.callback_query(F.data == "start_delete_category")
@admin_required
async def start_delete_category(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        async with AsyncSessionLocal() as session:
            categories_with_brands = await get_categories_with_brands(session)

            if not categories_with_brands:
                await callback.answer("‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            builder = InlineKeyboardBuilder()
            for category, brand in categories_with_brands:
                builder.button(
                    text=f"{brand.name} / {category.name} (ID: {category.id})",
                    callback_data=f"select_delete_{category.id}"
                )
            builder.adjust(1)
            builder.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="categories_menu"))

            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )
            await state.set_state(CategoryStates.select_for_delete)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")
    finally:
        await callback.answer()


@router.callback_query(CategoryStates.select_for_delete, F.data.startswith("select_delete_"))
@admin_required
async def select_category_to_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_id = int(callback.data.split("_")[2])
        await state.update_data(category_id=category_id)

        async with AsyncSessionLocal() as session:
            category = await session.get(Category, category_id)
            if not category:
                await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
            await session.refresh(category, ['brand'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products_count = await session.execute(
                select(func.count(Product.id))
                .where(Product.category_id == category_id)
            )
            products_count = products_count.scalar()

            if products_count > 0:
                await callback.answer(
                    f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å {products_count} —Ç–æ–≤–∞—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏—Ö.",
                    show_alert=True
                )
                return

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )

            await callback.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n"
                f"–ë—Ä–µ–Ω–¥: {category.brand.name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name} (ID: {category.id})",
                reply_markup=builder.as_markup()
            )
            await state.set_state(CategoryStates.confirm_delete)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await callback.answer()


@router.callback_query(CategoryStates.confirm_delete, F.data == "confirm_delete")
@admin_required
async def confirm_category_delete(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = await state.get_data()
        category_id = data.get('category_id')

        if not category_id:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)
            await state.clear()
            return

        async with AsyncSessionLocal() as session:
            category = await session.get(Category, category_id)
            if not category:
                await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                await state.clear()
                return

            category_name = category.name
            brand_name = category.brand.name
            await session.delete(category)
            await session.commit()

            await callback.message.edit_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
                f"–ë—Ä–µ–Ω–¥: {brand_name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    finally:
        await state.clear()
        await callback.answer()


@router.callback_query(CategoryStates.confirm_delete, F.data == "cancel_delete")
@admin_required
async def cancel_category_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await state.clear()
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    finally:
        await callback.answer()
        await categories_menu(callback)


# ========================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò
# ========================

@router.callback_query(F.data == "products_menu")
@admin_required
async def products_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="view_products"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_product_select")
    )
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_product_select"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    await callback.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "view_products")
@admin_required
async def view_products(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ —Ñ–æ—Ç–æ)"""
    try:
        async with AsyncSessionLocal() as session:
            products_with_details = await get_products_with_details(session)

            if not products_with_details:
                await callback.message.answer("‚ÑπÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                return await callback.answer()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –±—Ä–µ–Ω–¥–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            products_by_category = {}
            for product, category, brand in products_with_details:
                key = f"{brand.name} / {category.name}"
                if key not in products_by_category:
                    products_by_category[key] = []
                products_by_category[key].append(product)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"
            for category_path, products in products_by_category.items():
                message_text += f"<b>{category_path}</b>\n"
                for product in products:
                    message_text += (
                        f"‚îú {product.name}\n"
                        f"‚îú‚îÄ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                        f"‚îú‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                        f"‚îî‚îÄ ID: {product.id}\n\n"
                    )

            await callback.message.answer(message_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await callback.answer()


@router.callback_query(F.data == "add_product_start")
@admin_required
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    async with AsyncSession(engine) as session:
        brands = await get_brands(session)

        if not brands:
            await callback.message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±—Ä–µ–Ω–¥—ã")
            return await callback.answer()

        builder = InlineKeyboardBuilder()
        for brand in brands:
            builder.button(text=brand.name, callback_data=f"add_prod_brand_{brand.id}")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddStates.product_brand)
        await callback.answer()


@router.callback_query(AddStates.product_brand, F.data.startswith("add_prod_brand_"))
@admin_required
async def select_product_category(callback: CallbackQuery, state: FSMContext):
    brand_id = int(callback.data.split("_")[3])
    await state.update_data(brand_id=brand_id)

    async with AsyncSession(engine) as session:
        brand = await session.get(Brand, brand_id)
        result = await session.execute(select(Category).where(Category.brand_id == brand.id))
        categories = result.scalars().all()

        if not categories:
            await callback.message.answer("‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return await state.clear()

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(text=category.name, callback_data=f"add_prod_cat_{category.id}")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddStates.product_category)
        await callback.answer()


@router.callback_query(AddStates.product_category, F.data.startswith("add_prod_cat_"))
@admin_required
async def set_product_name(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddStates.product_name)
    await callback.answer()


@router.message(AddStates.product_name)
@admin_required
async def set_product_price(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddStates.product_price)


@router.message(AddStates.product_price)
@admin_required
async def set_product_photo(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddStates.product_photo)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")


@router.message(AddStates.product_photo, F.photo)
@admin_required
async def set_product_description(message: Message, state: FSMContext):
    os.makedirs("/var/www/rshop/static/products", exist_ok=True)
    photo = message.photo[-1]
    photo_filename = f"{photo.file_id}.jpg"
    photo_url = f"products/{photo_filename}"
    full_path = f"/var/www/rshop/static/{photo_url}"

    try:
        file = await message.bot.get_file(photo.file_id)
        await message.bot.download_file(file.file_path, full_path)
        await state.update_data(photo_url=photo_url)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(AddStates.product_description)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}")


@router.message(AddStates.product_description)
@admin_required
async def add_product_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    description = message.text if message.text != "-" else None

    async with AsyncSession(engine) as session:
        product = Product(
            name=data['name'],
            price=data['price'],
            photo_url=data['photo_url'],
            description=description,
            category_id=data['category_id']
        )
        session.add(product)
        await session.commit()
        await session.refresh(product)

        caption = (
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω (ID: {product.id})\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
            f"–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )

        try:
            photo = FSInputFile(f"/var/www/rshop/static/{product.photo_url}")
            await message.answer_photo(photo, caption=caption)
        except:
            await message.answer(caption + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    await state.clear()
    await admin_panel(message)


@router.callback_query(F.data == "edit_product_select")
@admin_required
async def select_product_to_edit(callback: CallbackQuery):
    async with AsyncSession(engine) as session:
        products = await get_products(session)

        if not products:
            await callback.message.answer("‚ÑπÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return await callback.answer()

        builder = InlineKeyboardBuilder()
        for product in products:
            builder.button(
                text=f"{product.name} (ID: {product.id})",
                callback_data=f"edit_prod_{product.id}"
            )
        builder.adjust(1)
        builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="products_menu"))

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()


@router.callback_query(F.data.startswith("edit_prod_"))
@admin_required
async def select_product_field(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])
    await state.update_data(product_id=product_id)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name"),
        InlineKeyboardButton(text="üíµ –¶–µ–Ω–∞", callback_data="edit_field_price")
    )
    builder.row(
        InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_desc"),
        InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="edit_field_photo")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="products_menu"))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "edit_field_name")
@admin_required
async def edit_product_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditStates.field)
    await state.update_data(field="name")
    await callback.answer()


@router.callback_query(F.data == "edit_field_price")
@admin_required
async def edit_product_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await state.set_state(EditStates.field)
    await state.update_data(field="price")
    await callback.answer()


@router.callback_query(F.data == "edit_field_desc")
@admin_required
async def edit_product_desc(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):")
    await state.set_state(EditStates.field)
    await state.update_data(field="description")
    await callback.answer()


@router.callback_query(F.data == "edit_field_photo")
@admin_required
async def edit_product_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    await state.set_state(EditStates.field)
    await state.update_data(field="photo_url")
    await callback.answer()


@router.message(EditStates.field)
@admin_required
async def save_product_changes(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['field']
    value = message.text if field != "photo_url" else None

    if field == "photo_url" and message.photo:
        photo = message.photo[-1]
        photo_filename = f"{photo.file_id}.jpg"
        photo_url = f"products/{photo_filename}"
        full_path = f"/var/www/rshop/static/{photo_url}"

        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ
            async with AsyncSession(engine) as session:
                product = await session.get(Product, data['product_id'])
                old_photo = f"/var/www/rshop/static/{product.photo_url}"
                if os.path.exists(old_photo):
                    os.remove(old_photo)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
            file = await message.bot.get_file(photo.file_id)
            await message.bot.download_file(file.file_path, full_path)
            value = photo_url
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {str(e)}")
            return

    if field == "description" and value == "-":
        value = None

    if field == "price":
        try:
            value = float(value)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
            return

    async with AsyncSession(engine) as session:
        product = await session.get(Product, data['product_id'])
        setattr(product, field, value)
        await session.commit()
        await message.answer(f"‚úÖ {field.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    await state.clear()
    await admin_panel(message)